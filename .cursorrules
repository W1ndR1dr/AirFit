# AGENTS.md

## Sandboxed Environment Notice
- This agent runs in an isolated container without network access
- All project documentation is available locally in /AirFit/Docs/
- Research reports and analysis are stored in /AirFit/Docs/Research Reports/
- New research reports may be added during development
- Consult existing documentation before requesting external information

## Requesting External Research
When external information is needed:
1. Create a file: `/AirFit/Docs/Research Reports/REQUEST_[Topic].md`
2. Include:
   - Specific questions needing answers
   - Context about why information is needed
   - Expected format for response
3. Example filename: `REQUEST_HealthKitAPI.md`
4. Check for response in: `RESPONSE_[Topic].md`

## Environment Requirements
- Xcode 16.0+ with iOS 18.0 SDK
- Swift 6.0+ with strict concurrency
- SwiftLint 0.54.0+ 
- macOS 15.0+ (Sequoia)
- iPhone 16 Pro Simulator with iOS 18.4 (REQUIRED for builds/tests)

## Environment Setup Script
run: |
  # Install SwiftLint if not present
  if ! command -v swiftlint &> /dev/null; then
    brew install swiftlint || mint install realm/SwiftLint
  fi
  
  # Verify Xcode version
  xcodebuild -version | grep -E "Xcode 16" || echo "ERROR: Xcode 16+ required for iOS 18 SDK"
  
  # Verify Swift version
  swift --version | grep -E "Swift version 6" || echo "ERROR: Swift 6+ required"
  
  # Install xcbeautify for readable test output (optional)
  if ! command -v xcbeautify &> /dev/null; then
    brew install xcbeautify
  fi
  
  # Verify iOS 18 SDK
  xcodebuild -showsdks | grep -E "iOS 18" || echo "ERROR: iOS 18 SDK not found"

## Build Commands
**IMPORTANT**: Always use iOS 18.4 simulator for builds and tests
```bash
swiftlint --strict
xcodebuild -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' clean build
xcodebuild -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' test
```

## Test Commands
```bash
# Module 0 - Testing Foundation
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/TestingFoundationTests

# Module 1 - Core Setup
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/CoreSetupTests

# Module 2 - Data Layer
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/DataLayerTests

# Module 3 - Onboarding
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/OnboardingViewModelTests
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitUITests/OnboardingFlowUITests

# Module 4 - Dashboard
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/DashboardTests

# Module 5 - Meal Logging
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/MealLoggingTests

# Module 6 - Dashboard
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/DashboardTests

# Module 7 - Settings
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/SettingsTests

# Module 8 - Meal Discovery
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/MealDiscoveryTests

# Module 9 - AI Coach
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/AICoachTests

# Module 10 - Health Integration
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/HealthIntegrationTests

# Module 11 - Notifications
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitTests/NotificationTests

# Module 12 - Integration
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4' -only-testing:AirFitUITests/IntegrationTests
```

## Project Structure
```
AirFit/
├── Core/
│   ├── Constants/
│   ├── Extensions/
│   ├── Theme/
│   └── Utilities/
├── Modules/
│   ├── Dashboard/
│   ├── Onboarding/
│   ├── MealLogging/
│   ├── Progress/
│   ├── Settings/
│   ├── MealDiscovery/
│   ├── AICoach/
│   ├── Health/
│   └── Notifications/
├── Assets.xcassets/
├── Docs/
└── Tests/
```

## Swift 6 Requirements
- Enable complete concurrency checking
- All ViewModels: @MainActor @Observable
- All data models: Sendable
- Use actor isolation for services
- Async/await for all asynchronous operations
- No completion handlers

## iOS 18 Features
- SwiftData with history tracking
- @NavigationDestination for navigation
- Swift Charts for data visualization
- HealthKit granular permissions
- Control Widget extensions
- @Previewable macro for previews
- ScrollView content margins

## Architecture Pattern
- MVVM-C (Model-View-ViewModel-Coordinator)
- ViewModels handle business logic and state
- Views are purely declarative SwiftUI
- Coordinators manage navigation flow
- Services handle data operations
- Dependency injection via protocols

## Code Organization
```
Module/
├── Views/              # SwiftUI views
├── ViewModels/         # @Observable ViewModels
├── Models/             # Data models (Sendable)
├── Services/           # Business logic and API
├── Coordinators/       # Navigation management
└── Tests/              # Unit and UI tests
```

## Module Structure (Follow Schema Below)
**Completed**: Dashboard, Settings, Onboarding  
**Missing**: MealLogging, Progress, MealDiscovery, AICoach, Health, Notifications

## Code Style Format
```swift
// MARK: - View
struct OnboardingView: View {
    @State private var viewModel: OnboardingViewModel
    
    var body: some View {
        // SwiftUI content
    }
}

// MARK: - ViewModel
@MainActor
@Observable
final class OnboardingViewModel {
    private(set) var state: ViewState = .idle
    private let service: ServiceProtocol
    
    init(service: ServiceProtocol) {
        self.service = service
    }
}

// MARK: - Service Protocol
protocol OnboardingServiceProtocol: Sendable {
    func saveProfile(_ profile: Profile) async throws
}

// MARK: - Coordinator
@MainActor
final class OnboardingCoordinator: ObservableObject {
    @Published var path = NavigationPath()
    
    func showNextScreen() {
        path.append(OnboardingRoute.profileSetup)
    }
}
```

## Coding Standards
- Swift API Design Guidelines
- SwiftUI only (no UIKit)
- Protocol-oriented programming
- /// documentation for public APIs
- Meaningful names (no abbreviations)
- AppColors, AppFonts, AppConstants for styling
- Localizable.strings for all UI text
- Accessibility identifiers on interactive elements

## Testing Standards
- Unit tests for all business logic
- UI tests for major user flows
- 70% minimum code coverage
- AAA pattern (Arrange-Act-Assert)
- In-memory ModelContainer for SwiftData tests
- Mock all external dependencies
- Test naming: test_method_givenCondition_shouldResult()

## Error Handling
- Use Result<Success, Error> or async throws
- User-friendly error messages in alerts
- AppLogger.error() for all errors
- Specific catch blocks for known errors
- Generic fallback for unknown errors

## Git Standards
- Atomic commits
- Format: "Type: Brief description"
- Types: Feat/Fix/Test/Docs/Refactor/Style
- Run tests before commit
- Feature branches from main

## Module Order
1. Module 0: Testing Foundation (guidelines, mocks, test patterns)
2. Module 1: Core Setup
3. Module 2: Data Layer
4. Module 3: Onboarding
5. Module 4: HealthKit & Context Aggregation Module
6. Module 5: AI Persona Engine & CoachEngine
7. Module 6: Dashboard Module (UI & Logic)
8. Module 7: Workout Logging Module (iOS & WatchOS)
9. Module 8: Food Tracking Module (Voice-First AI-Powered Nutrition)
10. Module 9: Notifications & Engagement Engine
11. Module 10: Services Layer (API Clients, Multi-Provider AI Support)
12. Module 11: Settings Module (UI & Logic)
13. Module 12: Testing & Quality Assurance Framework
14. Module 13: Chat Interface Module (AI Coach Interaction)

## Performance Targets
- App launch: < 1.5s
- Transitions: 120fps
- List scrolling: 120fps with 1000+ items
- Memory: < 150MB typical
- SwiftData queries: < 50ms
- Network timeout: 30s

## Documentation References
- Docs/Module*.md for specifications
- Docs/Design.md for UI/UX
- Docs/ArchitectureOverview.md for system design
- Docs/TESTING_GUIDELINES.md for test patterns
- Docs/OnboardingFlow.md for user flow
- Docs/Research Reports/ contains deep research and analysis
- All module documentation is in /AirFit/Docs/
- Research reports may be added during development

## Module 8 (Food Tracking) Documentation References
- **@MODULE8_PROMPT_CHAIN.md** - Complete implementation prompt chain with all tasks, acceptance criteria, and sequencing for Module 8: Food Tracking (Voice-First AI-Powered Nutrition)
- **@Module8.md** - Detailed technical specifications, requirements, and architecture for the Food Tracking module (located at `AirFit/Docs/Module8.md`)
- **@Module8.5.md** - CRITICAL refactoring plan for architectural reconstruction (47 compilation errors, 23 architectural issues)
- **Key Integration**: Module 8 leverages Module 13's VoiceInputManager via adapter pattern (FoodVoiceAdapter) - NO new WhisperKit implementation needed
- **Voice Strategy**: Use existing Module 13 voice infrastructure with food-specific enhancements and post-processing
- **Dependencies**: Requires completion of Modules 1, 2, 4, 5, and 13 (Chat Interface for voice foundation)
- **REFACTORING REQUIRED**: Module 8.5 must be completed before any further Module 8 development

## Module 8.5: Critical Refactoring Phase
**Status**: CRITICAL - Production-blocking compilation failures  
**Quality Assessment**: 30% (Significant architectural debt)  
**Priority**: P0 - Must fix before any further development  

### **Refactoring Focus Areas**
1. **Type System Failures**: FoodDatabaseItem (referenced 23x, defined 0x), FoodNutritionSummary (requires 11 params, initialized with 0)
2. **Protocol Conformance**: CoachEngine doesn't conform to FoodCoachEngineProtocol, missing 8+ service methods
3. **Swift 6 Compliance**: Non-sendable types crossing actor boundaries, incomplete concurrency isolation
4. **Model Alignment**: ParsedFoodItem properties don't match usage (fiber vs fiberGrams, etc.)

### **Implementation Phases**
- **Phase 1**: Foundation Repair (4-5h) - Core type definitions, protocol fixes
- **Phase 2**: Service Layer (5-6h) - Complete protocol implementations
- **Phase 3**: ViewModel Fix (3-4h) - Resolve all compilation errors
- **Phase 4**: Swift 6 (2-3h) - Concurrency compliance
- **Phase 5**: Integration (2-3h) - Build verification

## Pre-Implementation Checklist
- [ ] Read module documentation in /AirFit/Docs/
- [ ] Check Research Reports for relevant analysis
- [ ] Review existing implementations
- [ ] Check Design.md for UI specifications
- [ ] Verify module dependencies are complete
- [ ] Create feature branch from main

## XcodeGen File Inclusion Schema

### CRITICAL: Target-Specific File Assignment

Our `project.yml` defines 3 targets with specific file inclusion rules:

#### 1. **AirFit** (Main App Target)
```yaml
sources:
  - path: AirFit
    includes: ["**/*.swift"]
    excludes: ["**/*.md", "**/.*", "AirFitTests/**", "AirFitUITests/**"]
  # EXPLICIT FILES (due to XcodeGen nesting bug):
  - AirFit/Modules/{ModuleName}/...
  - AirFit/Data/Models/...
  - AirFit/Core/...
  - AirFit/Services/...
  - AirFit/Application/...
```

#### 2. **AirFitTests** (Unit Test Target)
```yaml
sources:
  - path: AirFit/AirFitTests
    includes: ["**/*.swift"]
  # EXPLICIT TEST FILES:
  - AirFit/AirFitTests/Onboarding/OnboardingServiceTests.swift
  - AirFit/AirFitTests/Onboarding/OnboardingFlowViewTests.swift
  - AirFit/AirFitTests/Onboarding/OnboardingViewTests.swift
```

#### 3. **AirFitUITests** (UI Test Target)
```yaml
sources:
  - path: AirFit/AirFitUITests
    includes: ["**/*.swift"]
```

### XcodeGen Nesting Bug Workaround

**Problem**: `**/*.swift` glob pattern fails for nested directories like `AirFit/Modules/*/`  
**Root Cause**: XcodeGen doesn't properly expand globs in nested module structures  
**Solution**: Explicitly list ALL files in nested directories

### File Addition Workflow

#### For Main App Files:
```bash
# 1. Create file in appropriate directory
# 2. Add to project.yml under AirFit target sources
# 3. Regenerate project
xcodegen generate
# 4. Verify inclusion
grep -c "YourFileName" AirFit.xcodeproj/project.pbxproj
```

#### For Test Files:
```bash
# 1. Create test file in AirFit/AirFitTests/
# 2. Add to project.yml under AirFitTests target sources  
# 3. Regenerate project
xcodegen generate
# 4. Verify inclusion
grep -c "YourTestFile" AirFit.xcodeproj/project.pbxproj
```

### Module File Template
```yaml
# Add to AirFit target sources in project.yml:
- AirFit/Modules/{ModuleName}/Models/{ModuleName}Models.swift
- AirFit/Modules/{ModuleName}/ViewModels/{ModuleName}ViewModel.swift
- AirFit/Modules/{ModuleName}/Views/{ModuleName}FlowView.swift
- AirFit/Modules/{ModuleName}/Views/{Feature}View.swift
- AirFit/Modules/{ModuleName}/Services/{ModuleName}Service.swift
- AirFit/Modules/{ModuleName}/Services/{ModuleName}ServiceProtocol.swift
```

### Test File Template
```yaml
# Add to AirFitTests target sources in project.yml:
- AirFit/AirFitTests/{ModuleName}/{ModuleName}ServiceTests.swift
- AirFit/AirFitTests/{ModuleName}/{ModuleName}ViewModelTests.swift
- AirFit/AirFitTests/{ModuleName}/{ModuleName}ViewTests.swift
```

## Post-Implementation Checklist

### 1. **File Inclusion Verification** (CRITICAL)
```bash
# Check ALL new files are included in project
find AirFit/Modules/YourModule -name "*.swift" | while read file; do
  filename=$(basename "$file")
  count=$(grep -c "$filename" AirFit.xcodeproj/project.pbxproj)
  echo "$filename: $count"
  if [ $count -eq 0 ]; then echo "❌ MISSING: $file"; fi
done

# Check test files
find AirFit/AirFitTests/YourModule -name "*.swift" | while read file; do
  filename=$(basename "$file")
  count=$(grep -c "$filename" AirFit.xcodeproj/project.pbxproj)
  echo "$filename: $count"
  if [ $count -eq 0 ]; then echo "❌ MISSING: $file"; fi
done
```

### 2. **Build Verification**
```bash
# Clean build to verify all files compile
xcodebuild clean build -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro' -quiet
echo "✅ Build Status: $?"
```

### 3. **Test Coverage Verification**
```bash
# Run module-specific tests
xcodebuild test -scheme "AirFit" -destination 'platform=iOS Simulator,name=iPhone 16 Pro' -only-testing:AirFitTests/YourModuleTests
```

### 4. **Code Quality**
```bash
# SwiftLint check
swiftlint --strict
```

### 5. **Final Commit**
```bash
git add .
git commit -m "Feat: Add Module X with comprehensive test coverage

- Implemented YourModule with N files
- Added comprehensive test suite (X tests)
- Verified XcodeGen file inclusion
- All builds and tests passing"
```
