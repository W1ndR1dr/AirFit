import SwiftUI
import SwiftData

@main
struct AirFitApp: App {
    @State private var diagnosticState = DiagnosticState()
    
    var body: some Scene {
        WindowGroup {
            DiagnosticView(state: diagnosticState)
                .task {
                    await runDiagnostics()
                }
        }
    }
    
    private func runDiagnostics() async {
        // Test 1: Basic UI Rendering
        diagnosticState.uiRenderTest = true
        try? await Task.sleep(for: .seconds(0.5))
        
        // Test 2: SwiftData
        diagnosticState.swiftDataTest = await testSwiftData()
        try? await Task.sleep(for: .seconds(0.5))
        
        // Test 3: DI Container
        diagnosticState.diContainerTest = await testDIContainer()
        try? await Task.sleep(for: .seconds(0.5))
        
        // Test 4: Complete Initialization
        diagnosticState.fullInitTest = await testFullInitialization()
        
        diagnosticState.isComplete = true
    }
    
    private func testSwiftData() async -> Bool {
        do {
            let schema = Schema([User.self])
            let modelConfiguration = ModelConfiguration(isStoredInMemoryOnly: true)
            _ = try ModelContainer(for: schema, configurations: [modelConfiguration])
            diagnosticState.swiftDataError = nil
            return true
        } catch {
            diagnosticState.swiftDataError = error.localizedDescription
            return false
        }
    }
    
    private func testDIContainer() async -> Bool {
        do {
            // Test basic container creation without full bootstrapping
            let container = DIContainer()
            container.register(String.self) { _ in "Test" }
            let test = try await container.resolve(String.self)
            diagnosticState.diContainerError = nil
            return test == "Test"
        } catch {
            diagnosticState.diContainerError = error.localizedDescription
            return false
        }
    }
    
    private func testFullInitialization() async -> Bool {
        do {
            // Create in-memory container for testing
            let schema = Schema([
                User.self,
                OnboardingProfile.self,
                FoodEntry.self,
                Workout.self,
                Goal.self,
                ChatSession.self,
                ChatMessage.self,
                CoachMessage.self,
                ConversationSession.self,
                ConversationResponse.self,
                DailyLog.self
            ])
            let modelConfiguration = ModelConfiguration(isStoredInMemoryOnly: true)
            let modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
            
            // Try creating DI container with timeout
            let containerTask = Task {
                try await DIBootstrapper.createAppContainer(modelContainer: modelContainer)
            }
            
            // Wait maximum 5 seconds
            let timeoutTask = Task {
                try await Task.sleep(for: .seconds(5))
                throw AppError.timeout
            }
            
            do {
                _ = try await containerTask.value
                timeoutTask.cancel()
                diagnosticState.fullInitError = nil
                return true
            } catch {
                containerTask.cancel()
                if error is CancellationError {
                    diagnosticState.fullInitError = "Initialization timed out after 5 seconds"
                } else {
                    diagnosticState.fullInitError = error.localizedDescription
                }
                return false
            }
        } catch {
            diagnosticState.fullInitError = error.localizedDescription
            return false
        }
    }
}

@Observable
class DiagnosticState {
    var uiRenderTest = false
    var swiftDataTest = false
    var diContainerTest = false
    var fullInitTest = false
    var isComplete = false
    
    var swiftDataError: String?
    var diContainerError: String?
    var fullInitError: String?
}

struct DiagnosticView: View {
    let state: DiagnosticState
    
    var body: some View {
        VStack(spacing: 20) {
            Text("AirFit Diagnostic Mode")
                .font(.largeTitle)
                .padding()
            
            VStack(alignment: .leading, spacing: 15) {
                DiagnosticRow(
                    title: "UI Rendering",
                    status: .success,
                    detail: "View is displaying"
                )
                
                DiagnosticRow(
                    title: "SwiftData",
                    status: state.swiftDataTest ? .success : (state.swiftDataError != nil ? .failure : .pending),
                    detail: state.swiftDataError ?? "ModelContainer creation"
                )
                
                DiagnosticRow(
                    title: "DI Container",
                    status: state.diContainerTest ? .success : (state.diContainerError != nil ? .failure : .pending),
                    detail: state.diContainerError ?? "Basic container operations"
                )
                
                DiagnosticRow(
                    title: "Full Initialization",
                    status: state.fullInitTest ? .success : (state.fullInitError != nil ? .failure : .pending),
                    detail: state.fullInitError ?? "Complete app bootstrap"
                )
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(10)
            .padding()
            
            if state.isComplete {
                VStack(spacing: 10) {
                    Text("Diagnostics Complete")
                        .font(.headline)
                    
                    if !state.fullInitTest {
                        Text("Initialization is hanging. Check DIBootstrapper.")
                            .foregroundColor(.red)
                            .multilineTextAlignment(.center)
                    }
                }
                .padding()
            } else {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle())
                    .scaleEffect(1.5)
            }
            
            Spacer()
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.white)
    }
}

struct DiagnosticRow: View {
    enum Status {
        case pending, success, failure
        
        var color: Color {
            switch self {
            case .pending: return .gray
            case .success: return .green
            case .failure: return .red
            }
        }
        
        var icon: String {
            switch self {
            case .pending: return "clock"
            case .success: return "checkmark.circle.fill"
            case .failure: return "xmark.circle.fill"
            }
        }
    }
    
    let title: String
    let status: Status
    let detail: String
    
    var body: some View {
        HStack {
            Image(systemName: status.icon)
                .foregroundColor(status.color)
                .font(.title2)
            
            VStack(alignment: .leading) {
                Text(title)
                    .font(.headline)
                Text(detail)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
        }
    }
}