name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode-beta.app/Contents/Developer

jobs:
  ci:
    name: Complete CI Pipeline
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for Periphery
      
    - name: Select Xcode
      run: sudo xcode-select -s $DEVELOPER_DIR
      
    # Step 1: Install dependencies and tools
    - name: Install Build Tools
      run: |
        brew install xcodegen swiftlint peripheryapp/periphery/periphery
        
    # Cache SPM dependencies
    - name: Cache Swift Package Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/org.swift.swiftpm
          ~/Library/org.swift.swiftpm
          .build
        key: ${{ runner.os }}-spm-${{ hashFiles('project.yml', '**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    # Cache derived data (selective caching for safety)
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex
          ~/Library/Developer/Xcode/DerivedData/Build/Intermediates.noindex
        key: ${{ runner.os }}-build-${{ hashFiles('project.yml', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-build-
        
    # Step 1: Generate Xcode Project
    - name: Generate Xcode Project
      run: |
        echo "🏗️ Generating Xcode project with XcodeGen..."
        xcodegen generate
        
    # Step 2: SwiftLint
    - name: SwiftLint Analysis
      run: |
        echo "🔍 Running SwiftLint with strict mode..."
        swiftlint --strict --config AirFit/.swiftlint.yml --reporter github-actions-logging
        
    # Step 3: Build Project
    - name: Build Project
      run: |
        echo "🔨 Building AirFit project..."
        xcodebuild build \
          -scheme AirFit \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0' \
          -configuration Debug \
          -quiet \
          | xcpretty --color
          
    # NOTE: Watch app build commented out - no watch target defined in project.yml yet
    # Will be re-enabled when AirFitWatchApp target is added to project.yml
    # - name: Build Watch App
    #   run: |
    #     echo "⌚ Building AirFit Watch app..."
    #     xcodebuild build \
    #       -scheme AirFitWatchApp \
    #       -destination 'platform=watchOS Simulator,name=Apple Watch Series 10 (46mm),OS=11.0' \
    #       -configuration Debug \
    #       -quiet \
    #       | xcpretty --color
        
    # Step 4: Run Unit Tests
    - name: Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        xcodebuild test \
          -scheme AirFit \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0' \
          -testPlan AirFit-Unit \
          -only-testing:AirFitTests \
          -parallel-testing-enabled YES \
          -maximum-concurrent-test-simulator-destinations 2 \
          -resultBundlePath TestResults/unit-tests.xcresult \
          -enableCodeCoverage YES \
          -quiet \
          | xcpretty --test --color
          
    - name: Run UI Tests
      run: |
        echo "🖥️ Running UI tests..."
        xcodebuild test \
          -scheme AirFit \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0' \
          -testPlan AirFit-UI \
          -only-testing:AirFitUITests \
          -resultBundlePath TestResults/ui-tests.xcresult \
          -quiet \
          | xcpretty --test --color
      continue-on-error: true # UI tests can be flaky in CI
      
    # Step 5: CI Guards (enforcing critical violations only)
    - name: CI Quality Guards
      run: |
        echo "🛡️ Running CI quality guards..."
        echo "Critical violations will fail CI. Set ALLOW_GUARD_FAIL=1 to bypass in emergencies."
        ./Scripts/ci-guards.sh
      
    # Step 6: Periphery Scan
    - name: Periphery Dead Code Analysis
      run: |
        echo "🔍 Running Periphery dead code analysis..."
        # Generate project first to ensure it's up to date
        xcodegen generate
        
        # Run Periphery scan (watch target excluded until added to project.yml)
        periphery scan \
          --project AirFit.xcodeproj \
          --schemes AirFit \
          --targets AirFit \
          --format json \
          > periphery-report.json || true
          
        # Also generate human-readable report
        periphery scan \
          --project AirFit.xcodeproj \
          --schemes AirFit \
          --targets AirFit \
          --format checkstyle \
          > periphery-report.xml || true
          
        echo "📊 Periphery scan completed"
      continue-on-error: true # Don't fail CI on unused code detection
      
    # Generate Test Coverage Report
    - name: Generate Coverage Report
      if: always()
      run: |
        echo "📊 Generating test coverage report..."
        if [ -d "TestResults/unit-tests.xcresult" ]; then
          xcrun xccov view --report --json TestResults/unit-tests.xcresult > coverage.json
          COVERAGE=$(cat coverage.json | jq -r '.targets[] | select(.name == "AirFit") | .lineCoverage * 100 | round')
          echo "Code Coverage: ${COVERAGE}%"
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
          
          # Generate human-readable coverage report
          xcrun xccov view --report TestResults/unit-tests.xcresult > coverage-report.txt
        else
          echo "No unit test results found, coverage: 0%"
          echo "COVERAGE=0" >> $GITHUB_ENV
        fi
        
    # Step 6: Upload Artifacts
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        retention-days: 30
        
    - name: Upload Periphery Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: periphery-report
        path: |
          periphery-report.json
          periphery-report.xml
        retention-days: 30
        
    - name: Upload CI Guards Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-guards-report
        path: |
          ci-guards-violations.txt
          ci-guards-summary.json
        retention-days: 30
      continue-on-error: true # Files might not exist yet
        
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.json
          coverage-report.txt
        retention-days: 30
        
    # Upload to Codecov
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        xcode: true
        xcode_archive_path: TestResults/unit-tests.xcresult
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    # Post Results Comment on PR
    - name: Post CI Results Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const coverage = process.env.COVERAGE || '0';
          const fs = require('fs');
          
          let peripheryResults = '';
          try {
            const peripheryData = JSON.parse(fs.readFileSync('periphery-report.json', 'utf8'));
            const issueCount = peripheryData.length || 0;
            peripheryResults = `🔍 Periphery: ${issueCount} unused code issues found`;
          } catch (e) {
            peripheryResults = '🔍 Periphery: Analysis failed or no issues found';
          }
          
          let guardsResults = '';
          try {
            if (fs.existsSync('ci-guards-violations.txt')) {
              const violations = fs.readFileSync('ci-guards-violations.txt', 'utf8').trim();
              const violationCount = violations ? violations.split('\n').length : 0;
              guardsResults = `🛡️ CI Guards: ${violationCount} violations found`;
            } else {
              guardsResults = '🛡️ CI Guards: No violations found';
            }
          } catch (e) {
            guardsResults = '🛡️ CI Guards: Analysis failed';
          }
          
          const body = `## 🚀 CI Pipeline Results
          
          ### 📊 Summary
          | Check | Result |
          |-------|--------|
          | 🏗️ Build | ✅ Passed |
          | 🔍 SwiftLint | ✅ Passed |
          | 🧪 Unit Tests | ✅ Passed |
          | 🖥️ UI Tests | ⚠️ See logs |
          | 📊 Code Coverage | ${coverage}% |
          
          ### 🔍 Quality Analysis
          - ${peripheryResults}
          - ${guardsResults}
          
          ### 📥 Artifacts Available
          - 📋 Test Results
          - 📊 Coverage Report
          - 🔍 Periphery Dead Code Analysis
          - 🛡️ CI Guards Report
          
          *View detailed results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  # Separate job for different test configurations
  test-matrix:
    name: Test Matrix
    runs-on: macos-14
    if: github.event_name == 'pull_request'
    
    strategy:
      fail-fast: false
      matrix:
        destination:
          - 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0'
          - 'platform=iOS Simulator,name=iPhone SE (3rd generation),OS=26.0'
          - 'platform=iOS Simulator,name=iPad Pro (13-inch) (M4),OS=26.0'
          
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s $DEVELOPER_DIR
      
    - name: Install XcodeGen
      run: brew install xcodegen
      
    - name: Generate Xcode Project
      run: xcodegen generate
      
    - name: Run Tests on ${{ matrix.destination }}
      run: |
        echo "🧪 Testing on ${{ matrix.destination }}..."
        xcodebuild test \
          -scheme AirFit \
          -destination '${{ matrix.destination }}' \
          -testPlan AirFit-Unit \
          -only-testing:AirFitTests \
          -quiet \
          | xcpretty --test --color
      continue-on-error: true
