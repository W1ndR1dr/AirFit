name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode-beta.app/Contents/Developer

jobs:
  test:
    name: Run Tests
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s $DEVELOPER_DIR
      
    - name: Install XcodeGen
      run: |
        brew install xcodegen
        
    - name: Generate Xcode Project
      run: |
        xcodegen generate
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Run Unit Tests
      run: |
        xcodebuild test \
          -scheme AirFit \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0' \
          -testPlan AirFit \
          -parallel-testing-enabled YES \
          -maximum-concurrent-test-simulator-destinations 4 \
          -resultBundlePath TestResults/unittest.xcresult \
          -enableCodeCoverage YES \
          | xcpretty --test --color
          
    - name: Run UI Tests
      run: |
        xcodebuild test \
          -scheme AirFit \
          -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0' \
          -only-testing:AirFitUITests \
          -resultBundlePath TestResults/uitest.xcresult \
          | xcpretty --test --color
      continue-on-error: true # UI tests can be flaky
      
    - name: Generate Coverage Report
      run: |
        xcrun xccov view --report --json TestResults/unittest.xcresult > coverage.json
        COVERAGE=$(cat coverage.json | jq '.targets[] | select(.name == "AirFit") | .lineCoverage')
        echo "Code Coverage: ${COVERAGE}%"
        echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults/
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        xcode: true
        xcode_archive_path: TestResults/unittest.xcresult
        fail_ci_if_error: false
        
    - name: Post Coverage Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const body = `## Test Results
          
          âœ… Tests passed
          ðŸ“Š Code Coverage: ${coverage}%
          
          | Metric | Value |
          |--------|-------|
          | Code Coverage | ${coverage}% |
          | Test Duration | See logs |
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  lint:
    name: SwiftLint & CI Guards
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Dependencies
      run: |
        brew install swiftlint
        brew install ripgrep
      
    - name: Run CI Guards
      run: |
        chmod +x Scripts/ci-guards.sh
        Scripts/ci-guards.sh
      
    - name: Run SwiftLint
      run: |
        cd AirFit
        swiftlint --strict --reporter github-actions-logging
